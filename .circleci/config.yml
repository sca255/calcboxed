# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build_lin:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-gcc-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'sudo apt update; sudo apt install -y libgl-dev libvulkan-dev;
             qt-cmake . -G Ninja -B ./build; cmake --build ./build;
             linuxdeploy --plugin qt -e "$(find ./build -maxdepth 1 -type f -executable)" --appdir ./build/deploy'
      - run: sudo apt install -y tarlz;
            tarlz -c build.zip build/deploy/*
      - store_artifacts:
          path: ./build.zip
          destination: scacalc_lin.zip
  build_and:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-android-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake ./ -G Ninja -B ./build -DQT_ANDROID_BUILD_ALL_ABIS=ON;
            cmake --build ./build'
      - store_artifacts:
          path: build/android-build/*.apk
          destination: android.zip
  build_wasm:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-wasm-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake ./ -G Ninja -B ./build; 
            cmake --build ./build'
      - run: sudo apt install -y tarlz;
            tarlz -c build.zip build/*
      - store_artifacts:
          path: ./build.zip
          destination: scacalc.zip
  build_win:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-mingw-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake . -G Ninja -B ./build; 
             cmake --build ./build
            windeployqt --qmldir .--dir build/deploy --libdir build/deploy/libs --plugindir build/deploy/plugins build/*.exe'
      - run: sudo apt install -y tarlz;
            tarlz -c build.zip build/deploy/*
      - store_artifacts:
          path: ./build.zip
          destination: scacalc_win.zip
  build_mac:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-macos-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake . -G Ninja -B ./build; cmake --build ./build;
            macdeployqt ./build/*.app -verbose=1 -dmg -qmldir=./project'
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build:
    jobs:
      - build_lin
      - build_and
      #- build_mac
      - build_wasm
      - build_win
