# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build_lin:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-gcc-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'sudo apt update; sudo apt install -y libgl-dev libvulkan-dev;
             qt-cmake . -G Ninja -B ./build; cmake --build ./build;
             linuxdeploy --plugin qt -e "$(find ./build -maxdepth 1 -type f -executable)" --appdir ./build/deploy'
      - run: sudo apt install -y zip;
            mkdir opt;
            zip -r opt/build.zip build/deploy
            
      - store_artifacts:
          path: opt
          destination: scacalc_lin
  build_and:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-android-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: export QT_ANDROID_KEYSTORE_PATH="./calculator.keystore";
            export QT_ANDROID_KEYSTORE_ALIAS="dev.sca255"
            sh -c 'qt-cmake ./ -G Ninja -B ./build -DQT_ANDROID_BUILD_ALL_ABIS=ON -DQT_ANDROID_DEPLOY_RELEASE=ON -DQT_ANDROID_SIGN_APK=ON -DQT_ANDROID_KEYSTORE_PATH="${CMAKE_CURRENT_SOURCE_DIR}/calculator.keystore" -DQT_ANDROID_KEYSTORE_ALIAS="dev.sca255";
            cmake --build ./build';
            mkdir opt;
            cp /home/user/project/build/android-build//build/outputs/apk/release/*.apk opt/
      - store_artifacts:
          path: opt
          destination: scacalc_android
  build_wasm:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-wasm-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake ./ -G Ninja -B ./build; 
            cmake --build ./build'
      - run: sudo apt install -y zip;
            mkdir opt;
            zip -r opt/build.zip build
      - store_artifacts:
          path: opt
          destination: scacalc
  build_win:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-mingw-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake . -G Ninja -B ./build; 
             cmake --build ./build;
            windeployqt --qmldir .--dir build/deploy --libdir build/deploy/libs --plugindir build/deploy/plugins build/*.exe';
      - run: sudo apt install -y zip;
            mkdir opt;
            zip -r opt/build.zip build/deploy
      - store_artifacts:
          path: opt
          destination: scacalc_win
  build_mac:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: stateoftheartio/qt6:6.6-macos-aqt
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: sh -c 'qt-cmake . -G Ninja -B ./build; cmake --build ./build;
            macdeployqt ./build/*.app -verbose=1 -dmg -qmldir=./project'
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build:
    jobs:
      - build_lin
      - build_and
      #- build_mac
      #- build_wasm
      #- build_win
